---
import { getCollection } from "astro:content";
import TestimonialSingle from "../components/TestimonialSingle.astro";

const { bookId, bookTitle } = Astro.props;
// console.log("ID: ", bookId);
// console.log("Title: ", bookTitle);


const relatedTestimonials = await getCollection('testimonials', ({id}) => {
   return bookId ? id.startsWith(bookId) : false;
});

// Don't show if there are no testimonials found
const count = relatedTestimonials.length;
console.log("Count: ", count);
if(count === 0) {
   return;
}

---

<!-- Template -->
<div class="section section--testimonials" data-pagefind-ignore>
   <div class="container">
      <div class="wrapper">
         <header class="testimonials__header">
            <h4>Nice words about {bookTitle ? <span class="book-title"> {bookTitle}</span> : <span class="mhairi-title">Mhairi</span>}</h4>
            <div class="quote-icon"></div>
         </header>

         <ul class="testimonials__items">
            {
               relatedTestimonials.map((relatedTestimonial, index) => (
                  <li class="testimonials__item" data-index={index}>
                     <TestimonialSingle
                        imageUrl={relatedTestimonial.data.testimonialImage}
                        imageTitle={relatedTestimonial.data.testimonialImageTitle}
                        imageAlt={relatedTestimonial.data.testimonialImageAlt}
                        url={relatedTestimonial.data.testimonialURL}
                        name={relatedTestimonial.data.testimonialName}
                        role={relatedTestimonial.data.testimonialRole}
                        text={relatedTestimonial.data.testimonialText}
                     />
                  </li>
               ))
            }
         </ul>
         {
            // Show controls if more than 1 testimonial
            count > 1 && <div class="testimonials__footer">

            <ul class="testimonials__controls">
               {
                  relatedTestimonials.map((item, index) => (
                     <li class="testimonials__control">
                        <button
                           class="testimonials__control--button"
                           type="button"
                           data-index={index}>
                           <svg xmlns="http://www.w3.org/2000/svg" 
                           viewBox="0 0 512 512"                   
                           height="9px"
                           width="9px"><!--!Font Awesome Free 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512z"/></svg>
                           <span class="visually-hidden">
                              Go to testimonial {index}
                           </span>
                        </button>
                     </li>
                  ))
               }
            </ul>
            <div class="testimonials__arrows">
               <button
                  class="button button--stroke prev is-hidden"
                  style="--button-stroke: var(--theme-color-lt, var(--color-surface-white));--button-hoverColor: var(--color-just-black);"
                  aria-label="Previous"
                  data-block="button">
                  <i class="button__icon"><svg xmlns="http://www.w3.org/2000/svg" height="33px"
                     width="33px" viewBox="0 0 512 512"
                     ><!--!Font Awesome Pro 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2024 Fonticons, Inc.-->
                     <path
                        class="fa-secondary"
                        opacity=".4"
                        d="M400 214.3v171.5a24 24 0 0 1 -20.3 23.7C332.9 416.7 318 448 256 447.8c-2.7 0-13.3 .2-16 .2-50.7 0-81.6-22.1-72.6-71.3-18.6-9.3-30.7-39.5-16.5-62.3-24.6-21.2-22.6-53.9-6.3-70.9H44.8c-24.2 0-44.8-20.2-44.8-43.8 0-23.3 21.4-43.8 44.8-43.8H194a135.8 135.8 0 0 1 -14.2-24.9C166.3 99.1 189.8 64 224 64c18.6 0 32.2 10.9 40 29.1 12.1 28.3 78.7 64.3 107.5 77.3A48 48 0 0 1 400 214.3z"
                     ></path><path
                        class="fa-primary"
                        d="M488 176h-48a24 24 0 0 0 -24 24v192a24 24 0 0 0 24 24h48a24 24 0 0 0 24-24V200a24 24 0 0 0 -24-24zm-24 212a20 20 0 1 1 20-20 20 20 0 0 1 -20 20z"
                     ></path></svg
                  ></i>
               </button>
   
               <button
                  class="button button--stroke next"
                  style="--button-stroke: var(--theme-color-lt, var(--color-surface-white));--button-hoverColor: var(--color-just-black);"
                  aria-label="Next"
                  data-block="button">
                  <i class="button__icon"><svg
                     height="33px"
                     width="33px"
                     xmlns="http://www.w3.org/2000/svg"
                     viewBox="0 0 512 512"
                     ><!--!Font Awesome Pro 6.5.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license (Commercial License) Copyright 2024 Fonticons, Inc.-->
                     <path
                        class="fa-secondary"
                        opacity=".4"
                        d="M512 199.7c0 23.6-20.7 43.8-44.8 43.8h-99.9c16.3 17 18.3 49.8-6.3 70.9 14.3 22.8 2.2 53-16.5 62.3 9 49.1-22 71.3-72.6 71.3-2.8 0-13.3-.2-16-.2-62 .2-76.9-31.1-123.7-38.3a24 24 0 0 1 -20.3-23.7V214.3a48 48 0 0 1 28.5-43.8c28.9-13 95.4-49 107.5-77.3C255.8 74.9 269.4 64 288 64c34.2 0 57.8 35.1 44.1 66.9A135.8 135.8 0 0 1 318 155.8h149.2c23.5 0 44.8 20.5 44.8 43.8z"
                     ></path><path
                        class="fa-primary"
                        d="M72 176H24a24 24 0 0 0 -24 24v192a24 24 0 0 0 24 24h48a24 24 0 0 0 24-24V200a24 24 0 0 0 -24-24zM48 388a20 20 0 1 1 20-20 20 20 0 0 1 -20 20z"
                     ></path></svg
                  ></i>
                  <span
                     class="button__flair"
                     style="translate: none; rotate: none; scale: none; transform: translate(14.1063%, 112.075%) scale(0, 0);"
                  ></span>
   
                  <span class="button__icon button__icon--circle-arrow-right"
                  ></span>
               </button>
            </div>
            </div>
         }
      </div>
      
   </div>
</div>

<!-- Styles -->
<style>

   .section--testimonials {
      background-color: var(--color__background-testimonials);
   }

   .wrapper {
      text-align: center;
      max-width: 999px;
      margin: 0 auto;
   }

   .testimonials__items {
      align-items: flex-start;
      display: grid;
      grid-template-columns: 1fr;
      list-style-type: none;
      position: relative;
      width: 100%;
   }
   .testimonials__item {
      /* opacity: 0; */
      grid-column-start: 1;
      grid-row-start: 1;
      width: 100%;
      font-size: 1.5rem;
      line-height: 1.3;
   }

   .testimonials__item.current-slide {
      /* opacity: 1; */
      z-index: 99;
   }

   .text {
   }

   .testimonials__footer {
      display: flex;
      justify-content: space-between;
      align-items: center;
   }

   /* Dots */

   .testimonials__control {
      margin: 0 5px 0;
   }

   .testimonials__control button {
      margin: 0;
      padding: 0;
      opacity: 0.5;
      transition: all 0.25s ease-out;
   }

   .testimonials__control button:hover {
      cursor: pointer;
   }

   .testimonials__control button.current-slide {
      cursor: auto;
   }

   .testimonials__control button:hover,
   .testimonials__control button.current-slide {
      opacity: 1;
   }

   /* Dark */
   html.dark .testimonials__control svg path {
      fill: white;
   }

   /* Arrows */

   .testimonials__arrows button {
      cursor: pointer;
      transition: all 0.25s ease-out;
   }

   .testimonials__arrows button:hover {
      cursor: pointer;
      transition: all 0.5s ease-in-out;
      animation: pointer 0.5s linear 1;
   }

   .testimonials__arrows button.next:hover {
      animation: pointer-next 0.5s linear 1;
   }

   .testimonials__arrows button.prev:hover {
      animation: pointer-prev 0.5s linear 1;
   }

   .testimonials__arrows button.is-hidden:hover {
      animation: none;
   }

   .testimonials__arrows button.is-hidden {
      opacity: 0.4;
      cursor: auto;
      animation: none;
   }

   /* Dark */
   html.dark .testimonials__arrows svg path {
      fill: white;
   }

   h4 {
      font-family: var(--font-alt);
      font-weight: normal;
      font-size: 1rem;
      margin-bottom: 2rem;
      display: inline-block;
      text-align: left;
   }
   h4 span {
      opacity: 0.5;
   }
   h4 em {
      font-family: var(--font-base);
      display: block;
      font-size: 1.8rem;
   }
   ul {
      margin: 0;
      padding: 0;
      display: flex;
   }
   li {
      list-style-type: none;
      margin: 0 0 2rem 0;
      padding: 0;
      text-align: left;
   }
   .nav--carousel {
      display: flex;
      gap: 10px;
   }
   button {
      border: none;
      background-color: transparent;
   }
   @keyframes pointer-next {
      0% {
         transform: translateX(0);
      }
      75% {
         transform: translateX(8px);
      }
      100% {
         transform: translateX(0);
      }
   }
   @keyframes pointer-prev {
      0% {
         transform: translateX(0);
      }
      75% {
         transform: translateX(-8px);
      }
      100% {
         transform: translateX(0);
      }
   }



   @media screen and (min-width: 636px) {
      .wrapper {
         text-align: left;
      }
      ul {
         margin: 0;
         padding: 0;
         display: flex;
      }
      li {
         margin: 0 2rem 0 0;
      }
      h4 em {
         font-size: 3.5rem;
         text-align: left;
      }
      .testimonials__item {
         font-size: 2rem;
      }
   }

   @media screen and (min-width: 1024px) {
      .testimonials__item {
         font-size: 2.5rem;
      }
   }
   
</style>

<!-- Scripts -->
<script is:inline>
   document.addEventListener("astro:page-load", () => {
      const ele = document.querySelector(".section--testimonials");
      if (ele) {
         // Register GSAP plugins
         gsap.registerPlugin(ScrollTrigger);

         /**
          * Load Vars
          */
         const sliderHeader   = ele.querySelector(".testimonials__header");
         const sliderBody     = ele.querySelector(".testimonials__items");
         const sliderFooter   = ele.querySelector(".testimonials__footer");
         const track          = ele.querySelector(".testimonials__items");
         const nextButton     = ele.querySelector(".button.next");
         const prevButton     = ele.querySelector(".button.prev");
         const dotsNav        = ele.querySelector(".testimonials__controls");

         if (track && track.children){
            // console.log(track.children);
            const slides         = Array.from(track.children);
            // console.log(slides);
            // Add "current-slide" class to first slide in the array
            var activeSlide      = slides[0];
            // console.log(activeSlide);
            activeSlide.className += " current-slide";
            // console.log(activeSlide);
         }
         if (dotsNav && dotsNav.children){
            const dots           = Array.from(dotsNav.children);
            var activeDot        = dots[0].querySelector(".testimonials__control--button");
            activeDot.className += " current-slide";
         }

         /**
          * Load GSAP Timelines
          */
         let tlMain                          = gsap.timeline({
            scrollTrigger: {
               trigger: ele,
               start: "60% bottom",
               // markers: true,
               once: true,
               onEnter: sliderInit,
               // onToggle: (self) => console.log('toggled, isActive:', self.isActive),
               // onUpdate: (self) => {
               //    console.log(
               //          'progress:',
               //          self.progress.toFixed(3),
               //          'direction:',
               //          self.direction,
               //          'velocity',
               //          self.getVelocity()
               //    );
               // }
            },
            paused: true, 
            id: ""
         });

         let tlMasterSlide                   = gsap.timeline({
                                                paused: true,
                                                // onComplete: masterSliderComplete,
                                                // onCompleteParams: [this,"param1"]
                                             });
         // let tlMasterSlideEnter              = gsap.timeline({ paused: true, id: "" });
         // let tlMasterSlideExit               = gsap.timeline({ paused: true, id: "" });
         let tlSlidesSetUp                   = gsap.timeline({ paused: true, id: "tlSlidesSetUp" });
         let tlSliderEnter                   = gsap.timeline({ paused: true, id: "" });
         // let tlSlideExit                     = gsap.timeline({ paused: true, id: "tlSlideExit" });
         // let tlSlideEnter                    = gsap.timeline({ paused: true, id: "" });

         function masterSliderComplete() { 
            // console.log("Param: %s", param);
            // console.log("Duration: %s", this.duration);
         }

         /**
          * Set up slides
          * 
          * @param {*} sliderHeader 
          * @param {*} sliderBody 
          * @param {*} sliderFooter
          * @param {String} track            List element containing slides
          */
         function sliderSetUp(
            sliderHeader, 
            sliderBody, 
            sliderFooter, 
            track
         ) {
            const tl = tlSlidesSetUp;
            let slides = gsap.utils.toArray(".testimonials__item", track); 
            // console.log(slides);

            // Hide the slider
            tl.set([ sliderHeader, sliderFooter ], { autoAlpha: 0 });

            // Hide all the slides
            slides.forEach((slide) => {
               tl.set(slide, {
                  autoAlpha: 0
               });
            })

            // Play animation
            tl.play();

         }

         /**
          * Animate the slider entrance
          * 
          * @param {*} sliderHeader 
          * @param {*} sliderBody 
          * @param {*} sliderFooter 
          */
         function animateSlider(
            sliderHeader, 
            sliderBody, 
            sliderFooter,
            slides
         ){
            // Show all slides


            const tl = tlSliderEnter;

            tl.fromTo(sliderHeader, { autoAlpha: 0, y: -30,}, { autoAlpha: 1, y: 0, duration: 0.5,})
            tl.fromTo(sliderFooter, { autoAlpha: 0, y: 30,}, { autoAlpha: 1, y: 0, duration: 0.5,})
            // tl.fromTo(sliderBody, { autoAlpha: 0, x: -30,}, { autoAlpha: 1, x: 0, duration: 0.5,})

            tl.play();

            // Get the current slide ready to load
            let targetSlide = track.querySelector(".current-slide");
            // console.log(targetSlide);

            // Load the first slide
            if(targetSlide){
               moveToSlide(null, targetSlide);
            }

            // console.log(slides[0]);

            // console.log(slides);
            // moveToSlide(
            //    slides[0], // First slide in array set as current slide
            // );
         };

         /**
          * Add Tweens To TL -> Slide Out
          * 
          * @param {string} slide 
          */
         function addTweensToTlSlideOut(slide){
            const slideImage  = slide.querySelector(".author__image");
            const slideName   = slide.querySelector(".author__bio__name");
            const slideRole   = slide.querySelector(".author__bio__role");
            const slideText   = slide.querySelector(".text");

            // var splitSlide = new SplitText(slideText, {type: "lines", linesClass: "lines"});
               
            let tl = gsap.timeline({ id: "SlideOut" });

            // tl.set(slide, { x: -20, autoAlpha: 1, id: "Set Opacity to 1"})
            
            tl.fromTo(
                  [slideImage],
                  {
                     autoAlpha: 1,
                  },
                  {
                     autoAlpha: 0,
                     duration: 0.5,
                  },
                  0.1
               )

            tl.fromTo(
                  [slideName, slideRole],
                  {
                     x: 0,
                     autoAlpha: 1,
                  },
                  {
                     x: -30,
                     autoAlpha: 0,
                     duration: 0.4,
                  },
                  0.1
               )
            /*
            tl.fromTo(
                  splitSlide.lines,
                  {
                     // autoAlpha: 1,
                     y: 0, 
                  },
                  {
                     duration: 0.3, 
                     // autoAlpha: 0,
                     y: -30, 
                     stagger: 0.1
                  },
                  0
               )
            */
            tl.fromTo(
               [slideText],
               {
                  x: 0,
                  autoAlpha: 1,
               },
               {
                  x: -30,
                  autoAlpha: 0,
                  duration: 0.4,
               },
               0
            );

            return tl;
         }

         /**
          * Add Tweens To TL -> Slide In
          * 
          * @param {string} slide 
          */
         function addTweensToTlSlideIn(slide){
            const slideImage  = slide.querySelector(".author__image");
            const slideName   = slide.querySelector(".author__bio__name");
            const slideRole   = slide.querySelector(".author__bio__role");
            const slideText   = slide.querySelector(".text");

            // var splitSlide = new SplitText(slideText, {type: "lines", linesClass: "lines"});
               
            let tl = gsap.timeline({ id: "SlideIn" });

            tl.set(slide, {autoAlpha: 1})
            tl.fromTo([slideText],{x: -30,autoAlpha: 0},{x:0,autoAlpha:1,duration: 0.4},0);
            tl.fromTo([slideImage],{autoAlpha: 0,},{autoAlpha: 1,duration: 0.1},0.3);
            tl.fromTo([slideName, slideRole],{x: -30,autoAlpha: 0,},{x: 0,autoAlpha: 1,duration: 0.1, stagger: 0.1,},0.3);
            // tl.set(slide, {backgroundColor:"#ffffff"})

            return tl;
         }

         /**
          * Move Slides
          * 
          * This function unloads any visible slide, loads next slide, and 
          * updates the dots and nav arrows.
          * 
          * @param {*} currentSlide 
          * @param {*} targetSlide 
          */
         function moveToSlide (currentSlide, targetSlide) {
            console.log(currentSlide);
            console.log(targetSlide);
            
            // Return if reselecting current active slide
            if (currentSlide == targetSlide) {
               console.log("Current and target are equal");
               return;
            }

            // Add to Master Timeline
            if (currentSlide) {
               tlMasterSlide.add(addTweensToTlSlideOut(currentSlide));  // Exit current slide
            }
            if (targetSlide) {
               tlMasterSlide.add(addTweensToTlSlideIn(targetSlide));    // Enter new slide
            }

            // Play Master Timeline
            tlMasterSlide.play();

            // If both current & target present,
            // change the classes.
            // This relates to loading the first slide, where we
            // do not want to change the class.
            if (currentSlide && targetSlide) {
               currentSlide.classList.remove("current-slide")
               targetSlide.classList.add("current-slide");
            };

            // Debug
            // console.log("Current Slide: ", currentSlide);
            // console.log("Target Slide: ", targetSlide);
         };

         /**
          * Show/hide Arrows
          * 
          * @param {Object} track 
          * @param {string} prevButton 
          * @param {string} nextButton 
          * @param {*} targetIndex 
          */
         function hideShowArrows (track, prevButton, nextButton, targetIndex) {
            const slides         = Array.from(track.children);
            number_of_slides = slides.length;

            // Don't show the arrows if there's only one slide
            console.log(number_of_slides);
            
            if(number_of_slides < 2){
               console.log("One slide found.");
               
               return;
            }
            last_slide = number_of_slides - 1;

            // Debug
            // console.log("Target Index: %s", targetIndex);
            // console.log(prevButton);
            // console.log(nextButton);
            // console.log("number_of_slides: %s", number_of_slides);
            // console.log("last_slide: %s", last_slide);

            if (targetIndex == 0) {
               // console.log("First");
               if (prevButton){
                  prevButton.classList.add("is-hidden")
               };
               if (nextButton){
                  nextButton.classList.remove("is-hidden");
               }
            } else if (targetIndex == last_slide) { // Last
               // console.log("Last");
               // console.log(last_slide);
               if (prevButton){
                  prevButton.classList.remove("is-hidden");
               }
               if (nextButton){
                  nextButton.classList.add("is-hidden");
               }
            } else {
               // console.log("Both");
               if (prevButton){
                  prevButton.classList.remove("is-hidden")
               };
               if (nextButton){
                  nextButton.classList.remove("is-hidden");
               }
            }
         };

         /**
          * Update Dots
          * 
          * @param {*} currentDot 
          * @param {*} targetDot 
          */
         function updateDots (currentDot, targetDot) {
            if (currentDot && targetDot){
               currentDot.classList.remove("current-slide");
               targetDot.classList.add("current-slide");
            }
            
            // Debug
            // console.log("Current Dot", currentDot);
            // console.log("Target Dot", targetDot);
         // 
         };

         /**
          * Slider Init
          * 
          * -- Display the slider 
          * -- Load the first slide
          * -- Add nav if required
          * 
          */
         function sliderInit() {

            // Display the slider
            animateSlider( sliderHeader, sliderBody, sliderFooter, track );

            if (isMultipleSlides(track) == true){
               // console.log("Multiple Slides Found");

               // Add event listeners to the nav
               nextButton.addEventListener("click", (e) => {

                  // Current
                  const currentSlide         = track.querySelector(".current-slide");
                  const currentDot           = dotsNav.querySelector(".current-slide");
                  const currentSlideIndex    = currentSlide.dataset.index;

                  // Target
                  const targetSlide          = currentSlide.nextElementSibling; // Next slide
                  if (!targetSlide) {
                     return;
                  }
                  const targetSlideIndex     = targetSlide.dataset.index;
                  const targetDots           = dotsNav.querySelectorAll(`[data-index="${targetSlideIndex}"]`);
                  const targetDot            = targetDots[0];
                  const targetDotIndex       = targetDot.dataset.index;

                  moveToSlide(currentSlide, targetSlide);
                  updateDots(currentDot, targetDot);
                  hideShowArrows(track, prevButton, nextButton, targetSlideIndex );

               });

               prevButton.addEventListener("click", (e) => {
               // Current
               const currentSlide         = track.querySelector(".current-slide");
               const currentDot           = dotsNav.querySelector(".current-slide");
               const currentSlideIndex    = currentSlide.dataset.index;

               // Target
               const targetSlide          = currentSlide.previousElementSibling; // Next slide
               if (!targetSlide) {
               return;
               }
               const targetSlideIndex     = targetSlide.dataset.index;
               const targetDots           = dotsNav.querySelectorAll(`[data-index="${targetSlideIndex}"]`);
               const targetDot            = targetDots[0];
               const targetDotIndex       = targetDot.dataset.index;

               moveToSlide(currentSlide, targetSlide);
               updateDots(currentDot, targetDot);
               hideShowArrows(track, prevButton, nextButton, targetSlideIndex );

               // Debug
               // console.log("Current Slide Index: %i", currentSlideIndex);
               // console.log("Next Slide Index: %i", targetSlideIndex);
               // console.log("Next Dot Index: %i", targetDotIndex);
               // console.log(targetDot);
               });

               dotsNav.addEventListener("click", (e) => {

               // Move slide when dot clicked
               const targetDot = e.target.closest("button");

               const targetIndex = targetDot.dataset.index;

               if (!targetDot) return;

               const currentSlide = track.querySelector(".current-slide");
               const currentDot = dotsNav.querySelector(".current-slide");
               const slides = Array.from(track.children);
               const targetSlide = slides[targetIndex];

               // Debug
               // console.log("Track:", track);
               // console.log("Track Children:", slides);
               // console.log("Target Dot:", targetDot);
               // console.log("Target Slide Index: %i", targetIndex);
               // console.log("Target Slide:",targetSlide);

               moveToSlide(currentSlide, targetSlide);
               updateDots(currentDot, targetDot);
               hideShowArrows(track, prevButton, nextButton, targetIndex);
               });
            }
         }

         /**
          * Check if there are multiple slides
          * 
          * @param {String} track 
          */
         function isMultipleSlides(track) {
            // Count the slides
            const slides = Array.from(track.children);
            count = slides.length;
            if (count < 2){
               return false;
            }
            return true;
         }

         // Set up the slider, ready to animate on scroll
         sliderSetUp( sliderHeader, sliderBody, sliderFooter, track );
      }
   });
</script>
